<?php class L {
const config_error_init = 'Foram encontrados erros de configuração!';
const config_error = '%s has not been properly configured, check the Nagmap Reborn configuration file and make the necessary corrections! Defined value: (%s)';
const moduleError = 'The module/extension (%s) was not found, it is essential for the operation of the Nagmap Reborn, please install the module/extension before proceeding.';
const file_not_find_error = '%s does not exist! Please set the variable in Nagmap Reborn config file!';
const in_definition_error = 'Starting a new in_definition before closing the previous one! That is not cool.';
const no_data_error = 'There is no data to display. You either did not set Nagmap Reborn properly or there is a software bug.<br>Please contact joao_carlos.r@hotmail.com assistance.';
const reported = ' reported.';
const errorFound = 'An error was automatically reported.';
const reporterErrorPre = 'An error has occurred but could not be reported!';
const reporterErrorOF = 'Could not report bug because one or more major project files have been modified!';
const emptyUserPass = 'Authentication username and/or password have not been defined, set user and password in the configuration file.';
const updateError = 'There was a problem updating the status of hosts, displayed statuses may be outdated, check the console for more information.';
const updateErrorDenied = 'There was a problem updating the status of the hosts, access was denied, please authenticate again!';
const updateMissing = 'There was a problem updating the status of the hosts, one or more hosts could not be found! Check the console for more information.';
const updateErrorServ = 'This type of error is usually related to the following problem: The server is inaccessible or recusing connections, check the server and your connection.';
const updateErrorStatus = 'This type of error is usually related to the following problem: The status file is inaccessible or does not exist, verify that the monitoring service is executing correctly.';
const updateErrorChanges = 'This type of error is usually related to the following problem: Host modifications, addition, removal or editing of names have occurred, in this case update the page.';
const updateErrorSolved = 'Issue solved, the statuses displayed are in real time.';
const accessDenied = 'Access denied, incorrect username and/or password! Reload the page and try again.';
const message = 'Message:';
const lineNum = 'Line number:';
const error = 'Error';
const at = 'At:';
const alias = 'Alias';
const hostG = 'Hostgroups';
const addr = 'Address';
const other = 'Other';
const hostP = 'Parents';
const newVersion = 'Update available';
const newVersionFooter = 'It will close after 10 seconds.';
const newVersionText = '<br>The currently used version of Nagmap Reborn is outdated!<br><br>Get the new version on GitHub:<br><br>';
const passAlertTitle = 'Default authentication';
const passAlert = 'Currently you are using the password and default user, do not be unprotected, modify it now!';
const asFilter = 'Use as a filter';
const up = 'UP';
const down = 'DOWN';
const warning = 'WARNING';
const unknown = 'UNKNOWN';
const critical = 'CRITICAL';
const and = 'and';
const waiting = 'Waiting';
const timePrefix = '';
const timeSuffix = ' ago.';
const filter = 'Filter';
const clear = 'Clear';
const debugOff = 'The debug is disabled, to access this page activate the debug in the configuration file.';
const debugTitle = 'Debug Info.';
const updating = 'Updating';
const mainPage = 'Main page';
const project = 'Project on GitHub';
const btop = 'Back to top';
const starting = 'Starting, wait.';
const stopped = 'Stopped';
const downData = 'Download data';
const verifications = 'Checks (static)';
const ignHosts = 'Ignored hosts (static)';
const statusFile = 'Status file info (dynamic)';
const hostName = 'Host name';
const reasons = 'Reason(s)';
const tServ = 'The service ';
const tHost = 'The host ';
const cs = 'Current state';
const lhs = 'Last hard state';
const lsc = 'Last state change';
const lhsc = 'Last hard state change';
const ltup = 'Last time up';
const ltd = 'Last time down';
const ltun = 'Last time unreachable';
const lto = 'Last time ok';
const ltw = 'Last time warning';
const ltunk = 'Last time unknown';
const ltc = 'Last time critical';
const isUp = 'is up';
const isDown = 'is down';
const inWar = 'is in warning';
const incrit = 'is critical';
const isunk = 'has an unknown status';
const controlInfo = 'Stop/Start information update';
const appStatus = 'Current application status';
const noLatLng = 'It has no definition of LatLng in the settings';
const noHostN = 'Do not have a HostName';
const noStatus = 'It does not exist in the Status file';
const outFilterHg = 'It is not in the filtered HostGroup.';
const help = 'Help';
const close = 'Close';
const primary = ' (Primary)';
const debugHelp = 'This page contains helpful information when requesting support! The characteristics of the pages are these: <strong>1 - Checks.</strong>      - Displays information about access control.      - Displays information about automatic error reporting.      - Displays information about file integrity.      - Reports important data and warnings about reported data. <strong>2 - Hosts that were ignored.</strong>      - Displays all the ignored hosts.      - Informs the host name.      - The host alias.      - The reasons or motives of that host have been ignored.      - The reasons can be very useful to define if it was a configuration error or application bug. <strong>3 - Important information about each host in the Status file.</strong>      - The color of the Card indicates the status of the host or service in question.      - Shows information about internal status.          - Green: ok; Yellow: warning; Orange: critical; Gray: unknown.      - Displays the time values for several parameters.      - Displays the time in Epoch format and the time in hours and minutes. <strong>4 - In the footer of the page there is the controller to update the page information.</strong>      - It is possible to stop the update at any time, useful for capturing quick events.      - There is also a download button that downloads a file with the information on the page right now.      - The download button is disabled during page information updates. <strong>Whenever requesting support</strong> access the debug page download the file and attach in your request, this procedure can and will make troubleshooting easier. You can get support by contacting me via e-mail: <strong>joao_carlos.r@hotmail.com</strong>';
const authFail = 'Authentication failed! Try again.';
const noAuthDanger = '<strong>Danger: </strong> Access control is currently disabled!';
const defaultPassUser = '<strong>Attention: </strong> Currently you are using the password and default user, do not be unprotected, modify it now!';
const AuthOk = '<strong>All right: </strong> Access control is enabled and default user change and password has been performed.';
const reportOffOF = '<strong>Danger: </strong> One or more main project files have been modified, so it is not possible to automatically report bugs.';
const reportOff = '<strong>Attention: </strong> Automatic errors reporting is disabled!';
const reportOk = '<strong>All right: </strong> All errors are reported automatically!';
const reportDataRequestP1 = '*To request all data collected from error reports, please send an email to: joao_carlos.r@hotmail.com<br>In the subject: Data of the report of errors.<br>In the body of the email, enter the domain (url) through which the service is accessed and your';
const reportDataRequestP2 = 'report token';
const reportDataRequestP3 = '<br>Your request will be dealt with as soon as possible, if necessary for security reasons, other forms of domain verification will be requested.';
const yourRToken = 'Your report token';
const accessControl = 'Access control';
const errorReporting = 'Error reporting';
const fileIntegrity = 'Files integrity';
const reportCountP1 = '<strong>Data: </strong>You have made';
const reportCountP2 = 'valid report(s) in the last 7 days.';
const debugFile = 'File';
const debugIntegrity = 'Integrity';
const address = 'Address';
const parent = 'Parents';
const start = 'Let\'s get started!';
const wait = 'Please wait while the {{t}}';
const debug_pg = 'Debug page';
const debug_csl = 'Debug console';
const cover_error = 'An error has occurred!';
const cr_map = 'map is created';
const cr_extras = 'extra elements are created';
const cr_hosts = 'hosts are loaded';
const cr_markers = 'markers are generated';
const cr_lines = 'lines are drawn';
const load = 'dependencies are loaded';
const too_long = 'This is taking too long, please refresh the page!';
const too_long_details = 'This error occurs when the initialization takes more than 50 seconds to complete, in this situation it is recommended to enable the debug to obtain the complete step-by-step report of the startup.';
const as_filter = 'Use as filter';
const not_released = 'This version has not yet been released and is still <strong>in development</strong> and therefore <strong>unfinished</strong>, it may contain <strong>several bugs</strong>.<br><br>Must be used for testing only!<br><br>For use in production the <strong>stable version</strong> must be adopted.';
const last_stable = 'Get the latest stable version.';
const details = 'Details';
const unsupported_browser = '<i class=\'material-icons\' style=\'font-size: 5vh;\'>warning</i> this browser is not compatible with NagmapReborn, please upgrade your browser or use a more modern one!';
const ngr_init_error = 'Failed to initialize class!';
public static function __callStatic($string, $args) {
    return vsprintf(constant("self::" . $string), $args);
}
}
function L($string, $args=NULL) {
    $return = constant("L::".$string);
    return $args ? vsprintf($return,$args) : $return;
}